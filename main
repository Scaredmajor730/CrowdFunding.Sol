//SPDX-Licence_Identifier: UNLICENSED
pragma solidity >=0.5.0 < 0.6.0;
contract CrowdFunding {
    mapping(address => uint) public contributors;
    address public manager;
    uint public minContribution;
    uint public deadline;
    uint public target;
    uint public raisedAmount;
    uint public numberOfContributors;
    struct Request {
        string description;
        address payable recipient;        
        uint value;
        bool completed;
        uint numberOfVoters;
        mapping(address=>bool) voters;
    }
    mapping(uint => Request) public requests;
    uint public numberOfRequests; 

       constructor(uint _target,uint _deadline) public {
        target = _target;
        deadline = block.timestamp + _deadline;
        minContribution =  10000 wei;
        manager = msg.sender;
    }

    function sendEth() public payable{
        require(block.timestamp < deadline, "Deadline has passed");
        require(msg.value >= minContribution, "Minimmum Contribution is not met");
        if(contributors[msg.sender] == 0){
          numberOfContributors++;
        }
        contributors[msg.sender]+=msg.value;
        raisedAmount+=msg.value;
    }

    function getContractBalance() public view returns(uint) {
        return address(this).balance;
    }
    function refund() public payable {
       require(target > raisedAmount && block.timestamp > deadline,"Refund cannot be initiated.");
       require(contributors[msg.sender]>0);
       address payable user;
       user = msg.sender;
       user.transfer(contributors[msg.sender]);
       contributors[msg.sender] = 0;

    }
    modifier onlyManager() {
        require(msg.sender == manager,"Only manager can gain access");
        _;
    }
   function createRequests(string memory _description, address payable _recipient, uint _value) public onlyManager{
        
        Request storage newRequest = requests[numberOfRequests];
        numberOfRequests;
        newRequest.description = _description;
        newRequest.recipient =  _recipient;
        newRequest.value = _value;
        newRequest.completed = false;
        newRequest.numberOfVoters=0;
   }

   function voteRequest(uint _requesNo) public {
       require(contributors[msg.sender]>0,"You must be contributor");
       Request storage thisRequest = requests[_requesNo];
       require(thisRequest.voters[msg.sender] == false,"You have already voted");
       thisRequest.voters[msg.sender] = true;
       thisRequest.numberOfVoters++;
   }

   function makePayment(uint _requestNo) public onlyManager {
       require(raisedAmount >= target);
       Request storage thisRequest = requests[_requestNo];
       require(thisRequest.completed == false, "The request has been completed");
       require(thisRequest.numberOfVoters > numberOfContributors, "Majority does not support");
       thisRequest.recipient.transfer(thisRequest.value);
       thisRequest.completed = true;
   }

}
